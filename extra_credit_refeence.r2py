"""
Programming assignment 1 submission
reference monitor to backup files



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    #creating a lock for multiple reads and writes
    mycontext['lock'] = createlock()
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
      self.Bfile = openfile(self.Bfn,create)
      #checking if the file is already in the directory
      if self.Afn in listfiles():
          self.Afile = openfile(self.Afn,create)

      else:
          self.Afile = openfile(self.Afn,create)
          self.Afile.writeat('SE',0)
      # if we are not creating new file we just copy contents of Afile to Bfile
    else:
      self.Afile = openfile(self.Afn,False)
      self.Bfile = openfile(self.Bfn,True)
      #copying contents in Bfile
      self.Bfile.writeat(self.Afile.readat(None,0),0)

  def writeat(self,data,offset):

    # Write the requested data to the B file using the sandbox's writeat call
    #acquiring lock to avoid multiple writes
    mycontext['lock'].acquire(True)
    #checking if offset is -ve
    if offset <0 :
        #raise RepyArgumentError
        mycontext['lock'].release()
        return
    #checking the offset with length of document
    elif offset > len(self.Bfile.readat(None,0)):
        #raise SeekPastEndOfFileError
        mycontext['lock'].release()
        return
    else:
        try:
           self.Bfile.writeat(data,offset)
           mycontext['lock'].release()
        except:
           mycontext['lock'].release()
           return

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    mycontext['lock'].acquire(True)
    length = len(self.Afile.readat(None,0))
    if offset < 0 or length < 0:
        mycontext['lock'].release()
        return
    elif offset >= len(self.Afile.readat(None,0)):
        mycontext['lock'].release()
        return
    else:

       try:

           read_data = self.Afile.readat(bytes,offset)
           mycontext['lock'].release()
           return read_data
       except:
            #raise RepyArgumentError
           mycontext['lock'].release()
           return


  def close(self):
    #storing in variables for future reference
    data = self.Bfile.readat(None,0)
    backupfile = self.Afn
    try:

       if self.Bfile.readat(None,0).startswith("S") and self.Bfile.readat(None,0).endswith("E"):

          self.Afile.close()
          removefile(backupfile)
          self.Afile = openfile(backupfile, True)
          self.Afile.writeat(data, 0)
       #extra credit storing all old backup files
       data_backup = self.Afile.readat(None,0)
       counter = 0
       for file in listfiles():
           if file.startswith(backupfile):
               counter = counter + 1
       if counter > 0 and backup_data != data:
           oldfile = backupfile + ".old" + str(counter)
           openfile(oldfile,True).writeat(backup_data,0)

    except:
       pass
   # if bfile is invalid then we do nothing, we just close the files
    self.Afile.close()
    self.Bfile.close()
    removefile(self.Bfn)






def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
